# dissect BAG 

# Define output object
$Record = [ordered] @{
    'postcode' = ''
    'tijdstipEindRegistratieLV' = ''
    'PandRef' = ''
    'pos' = ''
    'documentdatum' = ''
    'OpenbareRuimteRef' = ''
    'gebruiksdoel' = ''
    'posList' = ''
    'voorkomenidentificatie' = ''
    'status' = ''
    'naam' = ''
    'huisletter' = ''
    'NummeraanduidingRef' = ''
    'oorspronkelijkBouwjaar' = ''
    'huisnummer' = ''
    'eindRegistratie' = ''
    'tijdstipRegistratie' = ''
    'geconstateerd' = ''
    'identificatie' = ''
    'beginGeldigheid' = ''
    'eindGeldigheid' = ''
    'documentnummer' = ''
    'tijdstipRegistratieLV' = ''
    'oppervlakte' = ''
    'type' = ''
    'WoonplaatsRef' = ''
    'typeAdresseerbaarObject' = ''
  }

# Output Object collection
$oOutputs = @()

$BAGtype = "D:\NLDATA\BAG\20210608 BAGNLDL-08062021"

#$sInput = "$BAGtype\9999VBO08062021\*.xml"
#$sInput = "$BAGtype\9999LIG08062021\*.xml"
#$sInput = "$BAGtype\9999STA08062021\*.xml"
#$sInput = "$BAGtype\9999OPR08062021\*.xml"
#$sInput = "$BAGtype\9999NUM08062021\*.xml"
#$sInput = "$BAGtype\9999PND08062021\*.xml"
#$sInput = "$BAGtype\9999WPL08062021\*.xml"

$sOutput = "$BAGtype"

$files = Get-ChildItem -Path $sInput -File
Write-Host "Total XML files: "$files.Count

iF ($BAGtype = $BAGtype) {$substringcount=15}else{$substringcount=17};

ForEach($file in $files) {
  $xml = [xml](Get-Content -Path $file.FullName -Raw)

#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Verblijfsobject) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Ligplaats) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Standplaats) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.OpenbareRuimte) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Nummeraanduiding) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Pand) {
#  ForEach($item in $xml.bagStand.standBestand.stand.bagObject.Woonplaats) {

    $oOutput = New-Object PSObject -property $Record

    $oOutput.'NummeraanduidingRef' = $item.heeftAlsHoofdadres.NummeraanduidingRef."#text"
    $oOutput.'voorkomenidentificatie' = $item.voorkomen.Voorkomen.voorkomenidentificatie
    $oOutput.'beginGeldigheid' = $item.voorkomen.Voorkomen.beginGeldigheid
    $oOutput.'eindGeldigheid' = $item.voorkomen.Voorkomen.eindGeldigheid
    $oOutput.'tijdstipRegistratie' = $item.voorkomen.Voorkomen.tijdstipRegistratie
    $oOutput.'eindRegistratie' = $item.voorkomen.Voorkomen.eindRegistratie
    $oOutput.'tijdstipRegistratieLV' = $item.voorkomen.Voorkomen.BeschikbaarLV.tijdstipRegistratieLV
    $oOutput.'tijdstipEindRegistratieLV' = $item.voorkomen.Voorkomen.BeschikbaarLV.tijdstipEindRegistratieLV
    $oOutput.'identificatie' =  $item.identificatie."#text"
    $oOutput.'huisnummer' = $item.huisnummer
    $oOutput.'huisletter' = $item.huisletter
    $oOutput.'postcode' = $item.postcode
    $oOutput.'typeAdresseerbaarObject' = $item.typeAdresseerbaarObject
    $oOutput.'naam' = $item.naam
    $oOutput.'type' = $item.type
    $oOutput.'gebruiksdoel' = $item.gebruiksdoel -join "|"  <# gebruiksdoel kan meerdere malen voorkomen; ong. 264152 cases; met 'join' concateneer je deze #>
    $oOutput.'pos' = ''
    $oOutput.'posList' = ''
    $oOutput.'oppervlakte' = $item.oppervlakte
    $oOutput.'oorspronkelijkBouwjaar' = $item.oorspronkelijkBouwjaar
    $oOutput.'status' = $item.status
    $oOutput.'geconstateerd' = $item.geconstateerd
    $oOutput.'documentdatum' = $item.documentdatum
    $oOutput.'documentnummer' = $item.documentnummer
    $oOutput.'WoonplaatsRef' = $item.ligtIn.WoonplaatsRef."#text"
    $oOutput.'OpenbareRuimteRef' = $item.ligtAan.OpenbareRuimteRef."#text"
    $oOutput.'PandRef' = $item.maaktDeelUitVan.PandRef."#text"

    #append to object collection
    $oOutputs += $oOutput
  }
    
  $oOutputs | `
  Export-Csv -NoTypeInformation -Append -Path (Join-Path -Path $sOutput -ChildPath "$($file.name.substring(0,$substringcount)).csv")
  Write-Host "File $file done!"
  $oOutputs = @()

}
